const openaiService = require("./openaiService");
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º telegramService —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
// const telegramService = require("./telegramService");
const config = require("../config/config");
const { logger } = require("../utils/logger");
const historyService = require("./historyService");

class ContentService {
  constructor() {
    this.topics = config.topics;
  }

  /**
   * Generate content for a specific topic
   * @param {Object} topic - The topic object with name and prompt
   * @returns {Promise<string>} - The generated content
   */
  async generateTopicContent(topic) {
    try {
      logger.info(`Generating content for topic: ${topic.name}`);

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø—Ä–æ–º–ø—Ç
      const currentYear = new Date().getFullYear();

      // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
      let basePrompt = config.language === "ru" ? topic.prompt : topic.promptEn;

      // –î–æ–±–∞–≤–ª—è–µ–º —É–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â–∏–π –≥–æ–¥
      basePrompt =
        config.language === "ru"
          ? `${basePrompt} –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∑–∞ ${currentYear} –≥–æ–¥.`
          : `${basePrompt} Provide current information for ${currentYear}.`;

      // –£–ª—É—á—à–∞–µ–º –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Å—Ç–æ–≤
      const enhancedPrompt = historyService.enhancePromptWithHistory(
        topic.name,
        basePrompt
      );
      logger.info(
        `Using enhanced prompt with history for topic: ${topic.name}`
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–º–∞ "–ù–æ–≤–æ—Å—Ç–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π"
      const isMLTopic =
        topic.name === "–ù–æ–≤–æ—Å—Ç–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π";

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –¥–ª—è —ç—Ç–æ–π —Ç–µ–º—ã
      // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ–±-–ø–æ–∏—Å–∫ –¥–ª—è —Ç–µ–º—ã "–ù–æ–≤–æ—Å—Ç–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π"
      const useWebSearch =
        isMLTopic ||
        (config.enableWebSearch && config.webSearchTopics.includes(topic.name));

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –≤ –ø—Ä–æ–º–ø—Ç
      let finalPrompt = enhancedPrompt;
      if (useWebSearch) {
        if (isMLTopic) {
          // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç–µ–º—ã "–ù–æ–≤–æ—Å—Ç–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π"
          finalPrompt =
            config.language === "ru"
              ? `${enhancedPrompt}\n\n–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –º–∞—à–∏–Ω–Ω–æ–º—É –æ–±—É—á–µ–Ω–∏—é –∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º –∑–∞ ${currentYear} –≥–æ–¥. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö –∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è—Ö –Ω–∞ GitHub, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞–ª–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ –≤ ${currentYear} –≥–æ–¥—É. –£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤, –∏—Ö –∞–≤—Ç–æ—Ä–æ–≤, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏. –ù–µ —É–ø–æ–º–∏–Ω–∞–π 2023 –≥–æ–¥ –∫–∞–∫ —Ç–µ–∫—É—â–∏–π.`
              : `${enhancedPrompt}\n\nProvide the latest news and current information on machine learning and neural networks for ${currentYear}. Be sure to include information about new projects and repositories on GitHub that have become popular in ${currentYear}. Include repository names, their authors, number of stars, and a brief description of the technology. Do not mention 2023 as the current year.`;
        } else {
          finalPrompt =
            config.language === "ru"
              ? `${enhancedPrompt}\n\n–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ –∑–∞ ${currentYear} –≥–æ–¥. –ù–µ —É–ø–æ–º–∏–Ω–∞–π 2023 –≥–æ–¥ –∫–∞–∫ —Ç–µ–∫—É—â–∏–π.`
              : `${enhancedPrompt}\n\nProvide the latest news and current information on this topic for ${currentYear}. Do not mention 2023 as the current year.`;
        }
      }

      let content;
      if (useWebSearch) {
        logger.info(`Using web search for topic: ${topic.name}`);
        content = await openaiService.generateContentWithWebSearch(
          finalPrompt,
          topic.name
        );
        logger.info(
          `Content with web search generated for topic: ${topic.name}`
        );
      } else {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
        content = await openaiService.generateContent(finalPrompt);
        logger.info(
          `Content generated without web search for topic: ${topic.name}`
        );
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
      historyService.addPost(topic.name, content);

      logger.info(`Content generated successfully for topic: ${topic.name}`);
      return content;
    } catch (error) {
      logger.error(`Error generating content for topic ${topic.name}:`, error);
      throw error;
    }
  }

  /**
   * Post content for a specific topic
   * @param {number} topicIndex - The index of the topic in the config
   * @returns {Promise<void>}
   */
  async postTopicContent(topicIndex) {
    try {
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º telegramService –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
      const telegramService = require("./telegramService");

      const topic = config.topics[topicIndex];
      if (!topic) {
        throw new Error(`Topic with index ${topicIndex} not found`);
      }

      logger.info(`Posting content for topic: ${topic.name}`);
      const content = await this.generateTopicContent(topic);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –æ–ø—Ü–∏—è
      let imagePath = null;
      if (config.generateImages && topic.imagePrompt) {
        try {
          imagePath = await openaiService.generateImage(
            topic.imagePrompt,
            topic.name
          );
          logger.info(
            `Image generated for topic: ${topic.name}, path: ${imagePath}`
          );
        } catch (imageError) {
          logger.error(
            `Error generating image for topic ${topic.name}:`,
            imageError
          );
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        }
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞ (–Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ –≤ telegramService)
      const header =
        config.language === "ru"
          ? `üìù *${topic.name}*\n\n`
          : `üìù *${topic.name}*\n\n`;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏–ª–∏ –±–µ–∑
      if (imagePath) {
        await telegramService.sendPhotoToChannel(
          imagePath,
          `${header}${content}`
        );
      } else {
        await telegramService.sendMessageToChannel(`${header}${content}`);
      }

      logger.info(`Content posted successfully for topic: ${topic.name}`);
    } catch (error) {
      logger.error(
        `Error posting content for topic index ${topicIndex}:`,
        error
      );
      throw error;
    }
  }

  /**
   * Post content for a random topic
   * @returns {Promise<void>}
   */
  async postRandomTopicContent() {
    try {
      logger.info("Starting topic selection process for default topic");

      // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ç–µ–º—ã "–ù–æ–≤–æ—Å—Ç–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π"
      const defaultTopicName = "–ù–æ–≤–æ—Å—Ç–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π";
      let topicIndex = this.topics.findIndex(
        (topic) => topic.name === defaultTopicName
      );

      // –ï—Å–ª–∏ —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é —Ç–µ–º—É
      if (topicIndex === -1) {
        topicIndex = 0;
        logger.warn(
          `Default topic "${defaultTopicName}" not found, using topic at index 0`
        );
      }

      const selectedTopic = this.topics[topicIndex];
      logger.info(
        `Using default topic: "${selectedTopic.name}" (index: ${topicIndex})`
      );

      // –ü—É–±–ª–∏–∫—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã
      await this.postTopicContent(topicIndex);
      logger.info(
        `Content posted successfully for default topic: ${selectedTopic.name}`
      );
    } catch (error) {
      logger.error("Error posting content for default topic:", error);
      throw error;
    }
  }

  /**
   * Post content for all topics
   * @returns {Promise<void>}
   */
  async postAllTopicsContent() {
    try {
      for (let i = 0; i < config.topics.length; i++) {
        await this.postTopicContent(i);
      }
    } catch (error) {
      logger.error("Error posting all topics content:", error);
      throw error;
    }
  }
}

module.exports = new ContentService();
